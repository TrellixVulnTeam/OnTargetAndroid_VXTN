var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PreviewAnyFileOriginal = /** @class */ (function (_super) {
    __extends(PreviewAnyFileOriginal, _super);
    function PreviewAnyFileOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PreviewAnyFileOriginal.prototype.preview = function (url) { return cordova(this, "preview", {}, arguments); };
    PreviewAnyFileOriginal.prototype.previewBase64 = function (base64, options) { return cordova(this, "previewBase64", {}, arguments); };
    PreviewAnyFileOriginal.prototype.previewPath = function (url, options) { return cordova(this, "previewPath", {}, arguments); };
    PreviewAnyFileOriginal.prototype.previewAsset = function (url, options) { return cordova(this, "previewAsset", {}, arguments); };
    PreviewAnyFileOriginal.pluginName = "PreviewAnyFile";
    PreviewAnyFileOriginal.plugin = "cordova-plugin-preview-any-file";
    PreviewAnyFileOriginal.pluginRef = "PreviewAnyFile";
    PreviewAnyFileOriginal.repo = "https://github.com/mostafa-mansour1/previewAnyFile";
    PreviewAnyFileOriginal.install = "";
    PreviewAnyFileOriginal.installVariables = [];
    PreviewAnyFileOriginal.platforms = ["Android", "iOS"];
    return PreviewAnyFileOriginal;
}(IonicNativePlugin));
var PreviewAnyFile = new PreviewAnyFileOriginal();
export { PreviewAnyFile };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ByZXZpZXctYW55LWZpbGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBeURwQyxrQ0FBaUI7Ozs7SUFPbkQsZ0NBQU8sYUFBQyxHQUFXO0lBVW5CLHNDQUFhLGFBQUMsTUFBYyxFQUFFLE9BQStCO0lBVTdELG9DQUFXLGFBQUMsR0FBVyxFQUFFLE9BQStCO0lBVXhELHFDQUFZLGFBQUMsR0FBVyxFQUFFLE9BQStCOzs7Ozs7Ozt5QkEvRjNEO0VBMERvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpZXdBbnlGaWxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBwcmV2aWV3LlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBtaW1lIHR5cGUgb2YgdGhlIGZpbGUgdG8gcHJldmlldy5cbiAgICovXG4gIG1pbWVUeXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgUHJldmlld0FueUZpbGVcbiAqIEBkZXNjcmlwdGlvblxuICogV2hhdGV2ZXIgdGhlIGZpbGUgaXMgUERGIGRvY3VtZW50LCBXb3JkIGRvY3VtZW50LCBFeGNlbCwgb2ZmaWNlIGRvY3VtZW50LHppcCBhcmNoaXZlIGZpbGUsIGltYWdlLCB0ZXh0LCBodG1sIG9yIGFueXRoaW5nIGVsc2UsIHlvdSBjYW4gcGVyZm9ybSBhIHByZXZpZXcgYnkgdGhpcyBjb3Jkb3ZhIFBsdWdpbiB0byBwcmV2aWV3IGFueSBmaWxlIGluIG5hdGl2ZSBtb2RlIGJ5IHByb3ZpZGluZyB0aGUgbG9jYWwgb3IgZXh0ZXJuYWwgVVJMLlxuICpcbiAqICBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXByZXZpZXctYW55LWZpbGVgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbcHJldmlld0FueUZpbGUgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3N0YWZhLW1hbnNvdXIxL3ByZXZpZXdBbnlGaWxlKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFByZXZpZXdBbnlGaWxlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wcmV2aWV3LWFueS1maWxlL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJldmlld0FueUZpbGU6IFByZXZpZXdBbnlGaWxlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5wcmV2aWV3QW55RmlsZS5wcmV2aWV3KCdmaWxlOi8vZmlsZXBhdGguZXh0JylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMucHJldmlld0FueUZpbGUucHJldmlld1BhdGgoJ2h0dHA6Ly93d3cuZG9tYWluLmNvbS9zYW1wbGVmaWxlJylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1ByZXZpZXdBbnlGaWxlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcHJldmlldy1hbnktZmlsZScsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxuICBwbHVnaW5SZWY6ICdQcmV2aWV3QW55RmlsZScsIC8vIHRoZSB2YXJpYWJsZSByZWZlcmVuY2UgdG8gY2FsbCB0aGUgcGx1Z2luLCBleGFtcGxlOiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tb3N0YWZhLW1hbnNvdXIxL3ByZXZpZXdBbnlGaWxlJywgLy8gdGhlIGdpdGh1YiByZXBvc2l0b3J5IFVSTCBmb3IgdGhlIHBsdWdpblxuICBpbnN0YWxsOiAnJywgLy8gT1BUSU9OQUwgaW5zdGFsbCBjb21tYW5kLCBpbiBjYXNlIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIGluc3RhbGxWYXJpYWJsZXM6IFtdLCAvLyBPUFRJT05BTCB0aGUgcGx1Z2luIHJlcXVpcmVzIHZhcmlhYmxlc1xuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSwgLy8gQXJyYXkgb2YgcGxhdGZvcm1zIHN1cHBvcnRlZCwgZXhhbXBsZTogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByZXZpZXdBbnlGaWxlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogdGhpcyBmdW5jdGlvbiByZXR1cm4gU1VDQ0VTUyBpbiBzdWNjZXNzIGNhbGxiYWNrIGlmIHRoZSBmaWxlIHN1Y2Nlc3NmdWxseSBvcGVuZWQsIGlmIHRoZSBjb250ZW50IGlzIGJhc2U2NCB5b3UgaGF2ZSB0byB3cml0ZSBpdCBpbnRvIGZpbGUgYnkgY29yZG92YS1wbHVnaW4tZmlsZVxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IGZ1bGwgYWJzb2x1dGUgVVJMIGZvciB0aGUgZmlsZSwgaWYgdGhlIHBhdGggaXMgY29udGVudDovLyB5b3UgbmVlZCB0byByZXNvbHZlIHRoZSBuYXRpdmUgdXJsLCBpZiB0aGUgcGF0aCBpcyBodHRwczovLyBpdCBtYXkgbm90IHdvcmsgaW4gYW5kcm9pZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGZpbGUgb3BlbmVkIHJlamVjdCBpZiBub3Q7XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByZXZpZXcodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcmV2aWV3UGF0aCBmdW5jdGlvbiB3aWxsIHJldHVybiBzdWNjZXNzIGNhbGxiYWNrIGlmIHRoZSBmaWxlIHN1Y2Nlc3NmdWxseSBvcGVuZWQsIGlmIHRoZSBjb250ZW50IGlzIGJhc2U2NCB5b3UgaGF2ZSB0byB1c2UgcHJldmlld0Jhc2U2NCBtZXRob2RcbiAgICogQHBhcmFtIGJhc2U2NCB7U3RyaW5nfSBiYXNlNjQgc3RyaW5nIGNvbnRlbnRcbiAgICogQHBhcmFtIG9wdGlvbnMge1ByZXZpZXdBbnlGaWxlT3B0aW9uc30gZGVmaW5lIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHdpdGggZXh0ZW5zaW9uIG9yIGl0J3MgbWltZVR5cGUsIGlmIHRoZSBjb3JyZWN0IGV4dGVuc2lvbiBub3QgZXhpc3QgaW4gdGhlIHBhdGhcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcHJldmlld0Jhc2U2NChiYXNlNjQ6IHN0cmluZywgb3B0aW9ucz86IFByZXZpZXdBbnlGaWxlT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXZpZXdQYXRoIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHN1Y2Nlc3MgY2FsbGJhY2sgaWYgdGhlIGZpbGUgc3VjY2Vzc2Z1bGx5IG9wZW5lZCwgaWYgdGhlIGNvbnRlbnQgaXMgYmFzZTY0IHlvdSBoYXZlIHRvIHVzZSBwcmV2aWV3QmFzZTY0IG1ldGhvZFxuICAgKiBAcGFyYW0gdXJsIHtTdHJpbmd9IGZ1bGwgYWJzb2x1dGUgVVJMIC0+IGZpbGU6Ly8sIGNvbnRlbnQ6Ly8sIGh0dHA6Ly8sIGh0dHBzLCAuLi4gZXRjLCBpZiBleHRlbnNpb24gbm90IGV4aXN0LCB5b3UgbXVzdCBkZWZpbmUgaXQgaW4gdGhlIG9wdCBwYXJhbVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UHJldmlld0FueUZpbGVPcHRpb25zfSBkZWZpbmUgdGhlIG5hbWUgb2YgdGhlIGZpbGUgd2l0aCBleHRlbnNpb24gb3IgaXQncyBtaW1lVHlwZSwgaWYgdGhlIGNvcnJlY3QgZXh0ZW5zaW9uIG5vdCBleGlzdCBpbiB0aGUgcGF0aFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmV2aWV3UGF0aCh1cmw6IHN0cmluZywgb3B0aW9ucz86IFByZXZpZXdBbnlGaWxlT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXZpZXdQYXRoIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHN1Y2Nlc3MgY2FsbGJhY2sgaWYgdGhlIGZpbGUgc3VjY2Vzc2Z1bGx5IG9wZW5lZCwgaWYgdGhlIGNvbnRlbnQgaXMgYmFzZTY0IHlvdSBoYXZlIHRvIHVzZSBwcmV2aWV3QmFzZTY0IG1ldGhvZFxuICAgKiBAcGFyYW0gdXJsIHtTdHJpbmd9IGZ1bGwgYWJzb2x1dGUgVVJMIC0+IGZpbGU6Ly8sIGNvbnRlbnQ6Ly8sIGh0dHA6Ly8sIGh0dHBzLCAuLi4gZXRjLCBpZiBleHRlbnNpb24gbm90IGV4aXN0LCB5b3UgbXVzdCBkZWZpbmUgaXQgaW4gdGhlIG9wdCBwYXJhbVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UHJldmlld0FueUZpbGVPcHRpb25zfSBkZWZpbmUgdGhlIG5hbWUgb2YgdGhlIGZpbGUgd2l0aCBleHRlbnNpb24gb3IgaXQncyBtaW1lVHlwZSwgaWYgdGhlIGNvcnJlY3QgZXh0ZW5zaW9uIG5vdCBleGlzdCBpbiB0aGUgcGF0aFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmV2aWV3QXNzZXQodXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBQcmV2aWV3QW55RmlsZU9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19