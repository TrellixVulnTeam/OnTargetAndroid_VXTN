/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-cd-timer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
export class CdTimerComponent {
    /**
     * @param {?} elt
     * @param {?} renderer
     */
    constructor(elt, renderer) {
        this.elt = elt;
        this.renderer = renderer;
        this.onStart = new EventEmitter();
        this.onStop = new EventEmitter();
        this.onTick = new EventEmitter();
        this.onComplete = new EventEmitter();
        // Initialization
        this.autoStart = true;
        this.startTime = 0;
        this.endTime = 0;
        this.timeoutId = null;
        this.countdown = false;
        this.format = 'default';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const ngContentNode = this.elt.nativeElement.lastChild;
        this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';
        if (this.autoStart === undefined || this.autoStart === true) {
            this.start();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.resetTimeout();
    }
    /**
     * Start the timer
     * @return {?}
     */
    start() {
        this.initVar();
        this.resetTimeout();
        this.computeTimeUnits();
        this.startTickCount();
        this.onStart.emit(this);
    }
    /**
     * Resume the timer
     * @return {?}
     */
    resume() {
        this.resetTimeout();
        this.startTickCount();
    }
    /**
     * Stop the timer
     * @return {?}
     */
    stop() {
        this.clear();
        this.onStop.emit(this);
    }
    /**
     * Reset the timer
     * @return {?}
     */
    reset() {
        this.initVar();
        this.resetTimeout();
        this.clear();
        this.computeTimeUnits();
        this.renderText();
    }
    /**
     * Get the time information
     * @return {?} TimeInterface
     */
    get() {
        return {
            seconds: this.seconds,
            minutes: this.minutes,
            hours: this.hours,
            days: this.days,
            timer: this.timeoutId,
            tick_count: this.tickCounter
        };
    }
    /**
     * Initialize variable before start
     * @private
     * @return {?}
     */
    initVar() {
        this.startTime = this.startTime || 0;
        this.endTime = this.endTime || 0;
        this.countdown = this.countdown || false;
        this.tickCounter = this.startTime;
        // Disable countdown if start time not defined
        if (this.countdown && this.startTime === 0) {
            this.countdown = false;
        }
        // Determine auto format
        if (!this.format) {
            this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';
        }
    }
    /**
     * Reset timeout
     * @private
     * @return {?}
     */
    resetTimeout() {
        if (this.timeoutId) {
            clearInterval(this.timeoutId);
        }
    }
    /**
     * Render the time to DOM
     * @private
     * @return {?}
     */
    renderText() {
        /** @type {?} */
        let outputText;
        if (this.format === 'user') {
            // User presentation
            /** @type {?} */
            const items = {
                'seconds': this.seconds,
                'minutes': this.minutes,
                'hours': this.hours,
                'days': this.days
            };
            outputText = this.ngContentSchema;
            for (const key of Object.keys(items)) {
                outputText = outputText.replace('[' + key + ']', ((/** @type {?} */ (items)))[key].toString());
            }
        }
        else if (this.format === 'intelli') {
            // Intelli presentation
            outputText = '';
            if (this.days > 0) {
                outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';
            }
            if ((this.hours > 0) || (this.days > 0)) {
                outputText += this.hours.toString() + 'h ';
            }
            if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {
                outputText += this.minutes.toString().padStart(2, '0') + 'min ';
            }
            if ((this.hours === 0) && (this.days === 0)) {
                outputText += this.seconds.toString().padStart(2, '0') + 's';
            }
        }
        else if (this.format === 'hms') {
            // Hms presentation
            outputText = this.hours.toString().padStart(2, '0') + ':';
            outputText += this.minutes.toString().padStart(2, '0') + ':';
            outputText += this.seconds.toString().padStart(2, '0');
        }
        else {
            // Default presentation
            outputText = this.days.toString() + 'd ';
            outputText += this.hours.toString() + 'h ';
            outputText += this.minutes.toString() + 'm ';
            outputText += this.seconds.toString() + 's';
        }
        this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);
    }
    /**
     * @private
     * @return {?}
     */
    clear() {
        this.resetTimeout();
        this.timeoutId = null;
    }
    /**
     * Compute each unit (seconds, minutes, hours, days) for further manipulation
     * @protected
     * @return {?}
     */
    computeTimeUnits() {
        if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor((this.tickCounter / 60) % 60);
            this.hours = Math.floor((this.tickCounter / 3600) % 24);
            this.days = Math.floor((this.tickCounter / 3600) / 24);
        }
        else if (this.maxTimeUnit === 'second') {
            this.seconds = this.tickCounter;
            this.minutes = 0;
            this.hours = 0;
            this.days = 0;
        }
        else if (this.maxTimeUnit === 'minute') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor(this.tickCounter / 60);
            this.hours = 0;
            this.days = 0;
        }
        else if (this.maxTimeUnit === 'hour') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor((this.tickCounter / 60) % 60);
            this.hours = Math.floor(this.tickCounter / 3600);
            this.days = 0;
        }
        this.renderText();
    }
    /**
     * Start tick count, base of this component
     * @protected
     * @return {?}
     */
    startTickCount() {
        /** @type {?} */
        const that = this;
        that.timeoutId = setInterval((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            let counter;
            if (that.countdown) {
                // Compute finish counter for countdown
                counter = that.tickCounter;
                if (that.startTime > that.endTime) {
                    counter = that.tickCounter - that.endTime - 1;
                }
            }
            else {
                // Compute finish counter for timer
                counter = that.tickCounter - that.startTime;
                if (that.endTime > that.startTime) {
                    counter = that.endTime - that.tickCounter - 1;
                }
            }
            that.computeTimeUnits();
            /** @type {?} */
            const timer = {
                seconds: that.seconds,
                minutes: that.minutes,
                hours: that.hours,
                days: that.days,
                timer: that.timeoutId,
                tick_count: that.tickCounter
            };
            that.onTick.emit(timer);
            if (counter < 0) {
                that.stop();
                that.onComplete.emit(that);
                return;
            }
            if (that.countdown) {
                that.tickCounter--;
            }
            else {
                that.tickCounter++;
            }
        }), 1000); // Each seconds
    }
}
CdTimerComponent.decorators = [
    { type: Component, args: [{
                selector: 'cd-timer',
                template: ' <ng-content></ng-content>'
            }] }
];
/** @nocollapse */
CdTimerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
CdTimerComponent.propDecorators = {
    startTime: [{ type: Input }],
    endTime: [{ type: Input }],
    countdown: [{ type: Input }],
    autoStart: [{ type: Input }],
    maxTimeUnit: [{ type: Input }],
    format: [{ type: Input }],
    onStart: [{ type: Output }],
    onStop: [{ type: Output }],
    onTick: [{ type: Output }],
    onComplete: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.timeoutId;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.tickCounter;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.ngContentSchema;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.seconds;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.minutes;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.hours;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.days;
    /** @type {?} */
    CdTimerComponent.prototype.startTime;
    /** @type {?} */
    CdTimerComponent.prototype.endTime;
    /** @type {?} */
    CdTimerComponent.prototype.countdown;
    /** @type {?} */
    CdTimerComponent.prototype.autoStart;
    /** @type {?} */
    CdTimerComponent.prototype.maxTimeUnit;
    /** @type {?} */
    CdTimerComponent.prototype.format;
    /** @type {?} */
    CdTimerComponent.prototype.onStart;
    /** @type {?} */
    CdTimerComponent.prototype.onStop;
    /** @type {?} */
    CdTimerComponent.prototype.onTick;
    /** @type {?} */
    CdTimerComponent.prototype.onComplete;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.elt;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,