{"version":3,"sources":["ng://angular-cd-timer/lib/angular-cd-timer.component.ts","ng://angular-cd-timer/lib/angular-cd-timer.module.ts"],"names":["CdTimerComponent","elt","renderer","this","onStart","EventEmitter","onStop","onTick","onComplete","autoStart","startTime","endTime","timeoutId","countdown","format","prototype","ngAfterViewInit","ngContentNode","nativeElement","lastChild","ngContentSchema","nodeValue","undefined","start","ngOnDestroy","resetTimeout","initVar","computeTimeUnits","startTickCount","emit","resume","stop","clear","reset","renderText","get","seconds","minutes","hours","days","timer","tick_count","tickCounter","length","clearInterval","outputText","items","_b","__values","Object","keys","_c","next","done","key","value","replace","toString","padStart","setProperty","maxTimeUnit","Math","floor","that","setInterval","counter","Component","args","selector","template","ElementRef","Renderer2","Input","Output","CdTimerModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["\nimport {\n  AfterViewInit,\n  Component, ElementRef, EventEmitter, Input, OnDestroy, Output, Renderer2\n} from '@angular/core';\nimport {TimeInterface} from './angular-cd-timer.interface';\n\n@Component({\n  selector: 'cd-timer',\n  template: ' <ng-content></ng-content>'\n})\nexport class CdTimerComponent implements AfterViewInit, OnDestroy {\n  private timeoutId: any;\n  private tickCounter: number;\n  private ngContentSchema: string;\n\n  private seconds: number;\n  private minutes: number;\n  private hours: number;\n  private days: number;\n\n  @Input() startTime: number;\n  @Input() endTime: number;\n  @Input() countdown: boolean;\n  @Input() autoStart: boolean;\n  @Input() maxTimeUnit: string;\n  @Input() format: string;\n  @Output() onStart: EventEmitter<CdTimerComponent> = new EventEmitter<CdTimerComponent>();\n  @Output() onStop: EventEmitter<CdTimerComponent> = new EventEmitter<CdTimerComponent>();\n  @Output() onTick: EventEmitter<TimeInterface> = new EventEmitter<TimeInterface>();\n  @Output() onComplete: EventEmitter<CdTimerComponent> = new EventEmitter<CdTimerComponent>();\n\n  constructor(private elt: ElementRef, private renderer: Renderer2) {\n    // Initialization\n    this.autoStart  = true;\n    this.startTime  = 0;\n    this.endTime    = 0;\n    this.timeoutId  = null;\n    this.countdown  = false;\n    this.format     = 'default';\n  }\n\n  ngAfterViewInit() {\n    const ngContentNode = this.elt.nativeElement.lastChild;    // Get last child, defined by user or span\n    this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n    if (this.autoStart === undefined || this.autoStart === true) {\n      this.start();\n    }\n  }\n\n  ngOnDestroy() {\n    this.resetTimeout();\n  }\n\n  /**\n   * Start the timer\n   */\n  public start() {\n    this.initVar();\n    this.resetTimeout();\n    this.computeTimeUnits();\n    this.startTickCount();\n\n    this.onStart.emit(this);\n  }\n\n  /**\n   * Resume the timer\n   */\n  public resume() {\n    this.resetTimeout();\n\n    this.startTickCount();\n  }\n\n  /**\n   * Stop the timer\n   */\n  public stop() {\n    this.clear();\n\n    this.onStop.emit(this);\n  }\n\n  /**\n   * Reset the timer\n   */\n  public reset() {\n    this.initVar();\n    this.resetTimeout();\n    this.clear();\n    this.computeTimeUnits();\n    this.renderText();\n  }\n\n  /**\n   * Get the time information\n   * @returns TimeInterface\n   */\n  public get() {\n    return {\n      seconds: this.seconds,\n      minutes: this.minutes,\n      hours: this.hours,\n      days: this.days,\n      timer: this.timeoutId,\n      tick_count: this.tickCounter\n    };\n  }\n\n  /**\n   * Initialize variable before start\n   */\n  private initVar() {\n    this.startTime = this.startTime || 0;\n    this.endTime   = this.endTime || 0;\n    this.countdown = this.countdown || false;\n    this.tickCounter = this.startTime;\n\n    // Disable countdown if start time not defined\n    if (this.countdown && this.startTime === 0) {\n      this.countdown = false;\n    }\n\n    // Determine auto format\n    if (!this.format) {\n      this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';\n    }\n  }\n\n  /**\n   * Reset timeout\n   */\n  private resetTimeout() {\n    if (this.timeoutId) {\n      clearInterval(this.timeoutId);\n    }\n  }\n\n  /**\n   * Render the time to DOM\n   */\n  private renderText() {\n    let outputText;\n    if (this.format === 'user') {\n      // User presentation\n      const items = {\n        'seconds': this.seconds,\n        'minutes': this.minutes,\n        'hours': this.hours,\n        'days': this.days\n      };\n\n      outputText = this.ngContentSchema;\n\n      for (const key of Object.keys(items)) {\n        outputText = outputText.replace('[' + key + ']', (items as any)[key].toString());\n      }\n    } else if (this.format === 'intelli') {\n      // Intelli presentation\n      outputText = '';\n      if (this.days > 0) {\n        outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';\n      }\n      if ((this.hours > 0) || (this.days > 0)) {\n        outputText += this.hours.toString() + 'h ';\n      }\n      if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {\n        outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n      }\n      if ((this.hours === 0) && (this.days === 0)) {\n        outputText += this.seconds.toString().padStart(2, '0') + 's';\n      }\n    } else if (this.format === 'hms') {\n      // Hms presentation\n      outputText = this.hours.toString().padStart(2, '0') + ':';\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else {\n      // Default presentation\n      outputText = this.days.toString() + 'd ';\n      outputText += this.hours.toString() + 'h ';\n      outputText += this.minutes.toString() + 'm ';\n      outputText += this.seconds.toString() + 's';\n    }\n\n    this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n  }\n\n  private clear() {\n    this.resetTimeout();\n    this.timeoutId = null;\n  }\n\n  /**\n   * Compute each unit (seconds, minutes, hours, days) for further manipulation\n   * @protected\n   */\n  protected computeTimeUnits() {\n    if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n      this.seconds  = Math.floor(this.tickCounter % 60);\n      this.minutes  = Math.floor((this.tickCounter / 60) % 60);\n      this.hours    = Math.floor((this.tickCounter / 3600) % 24);\n      this.days     = Math.floor((this.tickCounter / 3600) / 24);\n    } else if (this.maxTimeUnit === 'second') {\n      this.seconds  = this.tickCounter;\n      this.minutes  = 0;\n      this.hours    = 0;\n      this.days     = 0;\n    } else if (this.maxTimeUnit === 'minute') {\n      this.seconds  = Math.floor(this.tickCounter % 60);\n      this.minutes  = Math.floor(this.tickCounter / 60);\n      this.hours    = 0;\n      this.days     = 0;\n    } else if (this.maxTimeUnit === 'hour') {\n      this.seconds  = Math.floor(this.tickCounter % 60);\n      this.minutes  = Math.floor((this.tickCounter / 60) % 60);\n      this.hours    = Math.floor(this.tickCounter / 3600);\n      this.days     = 0;\n    }\n\n    this.renderText();\n  }\n\n  /**\n   * Start tick count, base of this component\n   * @protected\n   */\n  protected startTickCount () {\n    const that = this;\n\n    that.timeoutId = setInterval(function() {\n      let counter;\n\n      if (that.countdown) {\n        // Compute finish counter for countdown\n        counter = that.tickCounter;\n\n        if (that.startTime > that.endTime) {\n          counter = that.tickCounter - that.endTime - 1;\n        }\n      } else {\n        // Compute finish counter for timer\n        counter = that.tickCounter - that.startTime;\n\n        if (that.endTime > that.startTime) {\n          counter = that.endTime - that.tickCounter - 1;\n        }\n      }\n\n      that.computeTimeUnits();\n\n      const timer: TimeInterface = {\n        seconds: that.seconds,\n        minutes: that.minutes,\n        hours: that.hours,\n        days: that.days,\n        timer: that.timeoutId,\n        tick_count: that.tickCounter\n      };\n\n      that.onTick.emit(timer);\n\n      if (counter < 0) {\n        that.stop();\n\n        that.onComplete.emit(that);\n        return;\n      }\n\n      if (that.countdown) {\n        that.tickCounter--;\n      } else {\n        that.tickCounter++;\n      }\n    }, 1000); // Each seconds\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CdTimerComponent } from './angular-cd-timer.component';\n\n\n\n@NgModule({\n  declarations: [CdTimerComponent],\n  imports: [\n  ],\n  exports: [CdTimerComponent]\n})\nexport class CdTimerModule { }\n"]}