var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-cd-timer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
var CdTimerComponent = /** @class */ (function () {
    function CdTimerComponent(elt, renderer) {
        this.elt = elt;
        this.renderer = renderer;
        this.onStart = new EventEmitter();
        this.onStop = new EventEmitter();
        this.onTick = new EventEmitter();
        this.onComplete = new EventEmitter();
        // Initialization
        this.autoStart = true;
        this.startTime = 0;
        this.endTime = 0;
        this.timeoutId = null;
        this.countdown = false;
        this.format = 'default';
    }
    /**
     * @return {?}
     */
    CdTimerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ngContentNode = this.elt.nativeElement.lastChild;
        this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';
        if (this.autoStart === undefined || this.autoStart === true) {
            this.start();
        }
    };
    /**
     * @return {?}
     */
    CdTimerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.resetTimeout();
    };
    /**
     * Start the timer
     */
    /**
     * Start the timer
     * @return {?}
     */
    CdTimerComponent.prototype.start = /**
     * Start the timer
     * @return {?}
     */
    function () {
        this.initVar();
        this.resetTimeout();
        this.computeTimeUnits();
        this.startTickCount();
        this.onStart.emit(this);
    };
    /**
     * Resume the timer
     */
    /**
     * Resume the timer
     * @return {?}
     */
    CdTimerComponent.prototype.resume = /**
     * Resume the timer
     * @return {?}
     */
    function () {
        this.resetTimeout();
        this.startTickCount();
    };
    /**
     * Stop the timer
     */
    /**
     * Stop the timer
     * @return {?}
     */
    CdTimerComponent.prototype.stop = /**
     * Stop the timer
     * @return {?}
     */
    function () {
        this.clear();
        this.onStop.emit(this);
    };
    /**
     * Reset the timer
     */
    /**
     * Reset the timer
     * @return {?}
     */
    CdTimerComponent.prototype.reset = /**
     * Reset the timer
     * @return {?}
     */
    function () {
        this.initVar();
        this.resetTimeout();
        this.clear();
        this.computeTimeUnits();
        this.renderText();
    };
    /**
     * Get the time information
     * @returns TimeInterface
     */
    /**
     * Get the time information
     * @return {?} TimeInterface
     */
    CdTimerComponent.prototype.get = /**
     * Get the time information
     * @return {?} TimeInterface
     */
    function () {
        return {
            seconds: this.seconds,
            minutes: this.minutes,
            hours: this.hours,
            days: this.days,
            timer: this.timeoutId,
            tick_count: this.tickCounter
        };
    };
    /**
     * Initialize variable before start
     */
    /**
     * Initialize variable before start
     * @private
     * @return {?}
     */
    CdTimerComponent.prototype.initVar = /**
     * Initialize variable before start
     * @private
     * @return {?}
     */
    function () {
        this.startTime = this.startTime || 0;
        this.endTime = this.endTime || 0;
        this.countdown = this.countdown || false;
        this.tickCounter = this.startTime;
        // Disable countdown if start time not defined
        if (this.countdown && this.startTime === 0) {
            this.countdown = false;
        }
        // Determine auto format
        if (!this.format) {
            this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';
        }
    };
    /**
     * Reset timeout
     */
    /**
     * Reset timeout
     * @private
     * @return {?}
     */
    CdTimerComponent.prototype.resetTimeout = /**
     * Reset timeout
     * @private
     * @return {?}
     */
    function () {
        if (this.timeoutId) {
            clearInterval(this.timeoutId);
        }
    };
    /**
     * Render the time to DOM
     */
    /**
     * Render the time to DOM
     * @private
     * @return {?}
     */
    CdTimerComponent.prototype.renderText = /**
     * Render the time to DOM
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var outputText;
        if (this.format === 'user') {
            // User presentation
            /** @type {?} */
            var items = {
                'seconds': this.seconds,
                'minutes': this.minutes,
                'hours': this.hours,
                'days': this.days
            };
            outputText = this.ngContentSchema;
            try {
                for (var _b = __values(Object.keys(items)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    outputText = outputText.replace('[' + key + ']', ((/** @type {?} */ (items)))[key].toString());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (this.format === 'intelli') {
            // Intelli presentation
            outputText = '';
            if (this.days > 0) {
                outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';
            }
            if ((this.hours > 0) || (this.days > 0)) {
                outputText += this.hours.toString() + 'h ';
            }
            if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {
                outputText += this.minutes.toString().padStart(2, '0') + 'min ';
            }
            if ((this.hours === 0) && (this.days === 0)) {
                outputText += this.seconds.toString().padStart(2, '0') + 's';
            }
        }
        else if (this.format === 'hms') {
            // Hms presentation
            outputText = this.hours.toString().padStart(2, '0') + ':';
            outputText += this.minutes.toString().padStart(2, '0') + ':';
            outputText += this.seconds.toString().padStart(2, '0');
        }
        else {
            // Default presentation
            outputText = this.days.toString() + 'd ';
            outputText += this.hours.toString() + 'h ';
            outputText += this.minutes.toString() + 'm ';
            outputText += this.seconds.toString() + 's';
        }
        this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);
    };
    /**
     * @private
     * @return {?}
     */
    CdTimerComponent.prototype.clear = /**
     * @private
     * @return {?}
     */
    function () {
        this.resetTimeout();
        this.timeoutId = null;
    };
    /**
     * Compute each unit (seconds, minutes, hours, days) for further manipulation
     * @protected
     */
    /**
     * Compute each unit (seconds, minutes, hours, days) for further manipulation
     * @protected
     * @return {?}
     */
    CdTimerComponent.prototype.computeTimeUnits = /**
     * Compute each unit (seconds, minutes, hours, days) for further manipulation
     * @protected
     * @return {?}
     */
    function () {
        if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor((this.tickCounter / 60) % 60);
            this.hours = Math.floor((this.tickCounter / 3600) % 24);
            this.days = Math.floor((this.tickCounter / 3600) / 24);
        }
        else if (this.maxTimeUnit === 'second') {
            this.seconds = this.tickCounter;
            this.minutes = 0;
            this.hours = 0;
            this.days = 0;
        }
        else if (this.maxTimeUnit === 'minute') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor(this.tickCounter / 60);
            this.hours = 0;
            this.days = 0;
        }
        else if (this.maxTimeUnit === 'hour') {
            this.seconds = Math.floor(this.tickCounter % 60);
            this.minutes = Math.floor((this.tickCounter / 60) % 60);
            this.hours = Math.floor(this.tickCounter / 3600);
            this.days = 0;
        }
        this.renderText();
    };
    /**
     * Start tick count, base of this component
     * @protected
     */
    /**
     * Start tick count, base of this component
     * @protected
     * @return {?}
     */
    CdTimerComponent.prototype.startTickCount = /**
     * Start tick count, base of this component
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        that.timeoutId = setInterval((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var counter;
            if (that.countdown) {
                // Compute finish counter for countdown
                counter = that.tickCounter;
                if (that.startTime > that.endTime) {
                    counter = that.tickCounter - that.endTime - 1;
                }
            }
            else {
                // Compute finish counter for timer
                counter = that.tickCounter - that.startTime;
                if (that.endTime > that.startTime) {
                    counter = that.endTime - that.tickCounter - 1;
                }
            }
            that.computeTimeUnits();
            /** @type {?} */
            var timer = {
                seconds: that.seconds,
                minutes: that.minutes,
                hours: that.hours,
                days: that.days,
                timer: that.timeoutId,
                tick_count: that.tickCounter
            };
            that.onTick.emit(timer);
            if (counter < 0) {
                that.stop();
                that.onComplete.emit(that);
                return;
            }
            if (that.countdown) {
                that.tickCounter--;
            }
            else {
                that.tickCounter++;
            }
        }), 1000); // Each seconds
    };
    CdTimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cd-timer',
                    template: ' <ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    CdTimerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    CdTimerComponent.propDecorators = {
        startTime: [{ type: Input }],
        endTime: [{ type: Input }],
        countdown: [{ type: Input }],
        autoStart: [{ type: Input }],
        maxTimeUnit: [{ type: Input }],
        format: [{ type: Input }],
        onStart: [{ type: Output }],
        onStop: [{ type: Output }],
        onTick: [{ type: Output }],
        onComplete: [{ type: Output }]
    };
    return CdTimerComponent;
}());
export { CdTimerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.timeoutId;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.tickCounter;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.ngContentSchema;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.seconds;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.minutes;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.hours;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.days;
    /** @type {?} */
    CdTimerComponent.prototype.startTime;
    /** @type {?} */
    CdTimerComponent.prototype.endTime;
    /** @type {?} */
    CdTimerComponent.prototype.countdown;
    /** @type {?} */
    CdTimerComponent.prototype.autoStart;
    /** @type {?} */
    CdTimerComponent.prototype.maxTimeUnit;
    /** @type {?} */
    CdTimerComponent.prototype.format;
    /** @type {?} */
    CdTimerComponent.prototype.onStart;
    /** @type {?} */
    CdTimerComponent.prototype.onStop;
    /** @type {?} */
    CdTimerComponent.prototype.onTick;
    /** @type {?} */
    CdTimerComponent.prototype.onComplete;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.elt;
    /**
     * @type {?}
     * @private
     */
    CdTimerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,